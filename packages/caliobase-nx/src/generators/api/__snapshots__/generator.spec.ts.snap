// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`api generator should run successfully: apps/api/project.json 1`] = `
"{
  \\"name\\": \\"api\\",
  \\"$schema\\": \\"../../node_modules/nx/schemas/project-schema.json\\",
  \\"sourceRoot\\": \\"apps/api/src\\",
  \\"projectType\\": \\"application\\",
  \\"targets\\": {
    \\"build\\": {
      \\"executor\\": \\"@nrwl/webpack:webpack\\",
      \\"outputs\\": [
        \\"{options.outputPath}\\"
      ],
      \\"options\\": {
        \\"target\\": \\"node\\",
        \\"compiler\\": \\"tsc\\",
        \\"outputPath\\": \\"dist/apps/api\\",
        \\"main\\": \\"apps/api/src/main.ts\\",
        \\"tsConfig\\": \\"apps/api/tsconfig.app.json\\",
        \\"assets\\": [
          \\"apps/api/src/assets\\"
        ],
        \\"tsPlugins\\": [
          \\"@nestjs/swagger/plugin\\"
        ]
      },
      \\"configurations\\": {
        \\"production\\": {
          \\"optimization\\": true,
          \\"extractLicenses\\": true,
          \\"inspect\\": false,
          \\"fileReplacements\\": [
            {
              \\"replace\\": \\"apps/api/src/environments/environment.ts\\",
              \\"with\\": \\"apps/api/src/environments/environment.prod.ts\\"
            }
          ]
        }
      }
    },
    \\"serve\\": {
      \\"executor\\": \\"@nrwl/js:node\\",
      \\"options\\": {
        \\"buildTarget\\": \\"api:build\\"
      },
      \\"configurations\\": {
        \\"production\\": {
          \\"buildTarget\\": \\"api:build:production\\"
        }
      }
    },
    \\"lint\\": {
      \\"executor\\": \\"@nrwl/linter:eslint\\",
      \\"outputs\\": [
        \\"{options.outputFile}\\"
      ],
      \\"options\\": {
        \\"lintFilePatterns\\": [
          \\"apps/api/**/*.ts\\"
        ]
      }
    },
    \\"test\\": {
      \\"executor\\": \\"@nrwl/jest:jest\\",
      \\"outputs\\": [
        \\"coverage/apps/api\\"
      ],
      \\"options\\": {
        \\"jestConfig\\": \\"apps/api/jest.config.ts\\",
        \\"passWithNoTests\\": true
      }
    }
  },
  \\"tags\\": []
}
"
`;

exports[`api generator should run successfully: apps/api/src/app/app.module.ts 1`] = `
"import { SendRawEmailCommand, SES } from '@aws-sdk/client-ses';
import {
  CaliobaseModule,
  parseEnvVars,
  S3ObjectStorageProvider,
  TOKEN_TOKEN,
} from '@caliobase/caliobase';
import { DynamicModule, Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';
import { createTransport } from 'nodemailer';
import * as SESTransport from 'nodemailer/lib/ses-transport';
import { AppController } from './app.controller';
import { AppService } from './app.service';
import { OrganizationProfile } from './entities/organization-profile.entity';
import { UserProfile } from './entities/user-profile.entity';


const ses = new SES({});

const envVars = parseEnvVars(({ required, optional }) => ({
  pgConnectionString:
    optional(
      'PG_CONNECTION_JSON',
      (v) => {
        const { host, port, username, password } = JSON.parse(v);
        return \`postgresql://\${username}:\${password}@\${host}:\${port}/postgres\`;
      },
      null
    ) ?? required('PG_CONNECTION_STRING', String),
  cmsHostname: required('CMS_HOSTNAME', String),
  emailFromAddress: required('EMAIL_FROM_ADDRESS', String),
  s3: {
    bucket: optional('S3_BUCKET', String, ''),
    keyPrefix: optional('S3_KEY_PREFIX', String, ''),
    endpoint: optional('S3_ENDPOINT', String, undefined),
  },
  cdn: {
    urlPrefix: optional('STATIC_FILE_BASEURL', String, ''),
  },
}));

@Module({
  imports: [],
  controllers: [AppController],
  providers: [AppService],
})
export class AppModule {
  static async forRootAsync(): Promise<DynamicModule> {
    return {
      module: AppModule,
      providers: [],
      imports: [
        TypeOrmModule.forRoot({
          type: 'postgres',
          url: envVars.pgConnectionString,
          autoLoadEntities: true,
        }),
        
        CaliobaseModule.forRootAsync({
          urls: {
            forgotPassword: \`https://\${envVars.cmsHostname}/forgotPassword?token=\${TOKEN_TOKEN}\`,
          },
          controllerEntities: [],
          otherEntities: [],
          profileEntities: {
            OrganizationProfile,
            UserProfile,
            socialProfileToUserProfile: null,
          },
          objectStorageProvider: new S3ObjectStorageProvider({
            ...envVars.s3,
            cdnUrlPrefix: envVars.cdn.urlPrefix,
          }),
          emailTransport: createTransport(
            <SESTransport.Options>{
              SES: { aws: { SendRawEmailCommand }, ses },
            },
            { from: envVars.emailFromAddress }
          ),
        }),
      ],
    };
  }
}
"
`;

exports[`api generator should run successfully: apps/api/src/app/entities/organization-profile.entity.ts 1`] = `
"import {
  AbstractOrganizationProfile,
  CaliobaseEntity,
} from '@caliobase/caliobase';
import { Column } from 'typeorm';

@CaliobaseEntity({
  controller: { name: 'organization_profile' },
})
export class OrganizationProfile extends AbstractOrganizationProfile {
  @Column()
  name!: string;
}
"
`;

exports[`api generator should run successfully: apps/api/src/app/entities/user-profile.entity.ts 1`] = `
"import { AbstractUserProfile, CaliobaseEntity } from '@caliobase/caliobase';
import { Column } from 'typeorm';

@CaliobaseEntity({
  controller: { name: 'user_profile' },
})
export class UserProfile extends AbstractUserProfile {
  @Column()
  firstName!: string;

  @Column()
  lastName!: string;
}
"
`;

exports[`api generator should run successfully: apps/api/src/main.ts 1`] = `
"import { CaliobaseModule } from '@caliobase/caliobase';
import { Logger } from '@nestjs/common';
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app/app.module';

async function bootstrap() {
  const app = await NestFactory.create(AppModule.forRootAsync(), {
    cors: true,
  });

  const globalPrefix = 'api';
  app.setGlobalPrefix(globalPrefix);

  await CaliobaseModule.bootstrap(app, {
    migration: {
      migrationsDir: './apps/api/migrations',
    },
  });

  const port = process.env.PORT || 3324;
  await app.listen(port);
  Logger.log(
    \`ðŸš€ Application is running on: http://localhost:\${port}/\${globalPrefix}\`
  );
}

bootstrap().catch((err) => {
  console.error(err);
  process.exit(1);
});
"
`;

exports[`api generator should run successfully: package.json 1`] = `
"{
  \\"name\\": \\"test-name\\",
  \\"dependencies\\": {
    \\"@nestjs/common\\": \\"^9.0.0\\",
    \\"@nestjs/core\\": \\"^9.0.0\\",
    \\"@nestjs/platform-express\\": \\"^9.0.0\\",
    \\"nodemailer\\": \\"^6.7.5\\",
    \\"reflect-metadata\\": \\"^0.1.13\\",
    \\"rxjs\\": \\"^7.0.0\\",
    \\"tslib\\": \\"^2.3.0\\"
  },
  \\"devDependencies\\": {
    \\"@nestjs/schematics\\": \\"^9.0.0\\",
    \\"@nestjs/testing\\": \\"^9.0.0\\",
    \\"@nrwl/eslint-plugin-nx\\": \\"14.7.18\\",
    \\"@nrwl/jest\\": \\"14.7.18\\",
    \\"@nrwl/linter\\": \\"14.7.18\\",
    \\"@nrwl/nest\\": \\"14.7.18\\",
    \\"@nrwl/node\\": \\"14.7.18\\",
    \\"@types/jest\\": \\"28.1.1\\",
    \\"@types/node\\": \\"16.11.7\\",
    \\"@types/nodemailer\\": \\"^6.4.4\\",
    \\"@typescript-eslint/eslint-plugin\\": \\"^5.36.1\\",
    \\"@typescript-eslint/parser\\": \\"^5.36.1\\",
    \\"eslint\\": \\"~8.15.0\\",
    \\"eslint-config-prettier\\": \\"8.1.0\\",
    \\"jest\\": \\"28.1.1\\",
    \\"jest-environment-jsdom\\": \\"28.1.1\\",
    \\"ts-jest\\": \\"28.0.5\\",
    \\"ts-node\\": \\"10.9.1\\"
  }
}
"
`;
