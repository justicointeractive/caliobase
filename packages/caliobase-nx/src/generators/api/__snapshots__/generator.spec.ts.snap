// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`api generator should run successfully: apps/api/project.json 1`] = `
"{
  "name": "apps-api",
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "sourceRoot": "apps/api/src",
  "projectType": "application",
  "tags": [],
  "targets": {
    "build": {
      "executor": "@nx/webpack:webpack",
      "outputs": ["{options.outputPath}"],
      "defaultConfiguration": "production",
      "options": {
        "target": "node",
        "compiler": "tsc",
        "outputPath": "dist/apps/api",
        "main": "apps/api/src/main.ts",
        "tsConfig": "apps/api/tsconfig.app.json",
        "assets": ["apps/api/src/assets"],
        "webpackConfig": "apps/api/webpack.config.js",
        "generatePackageJson": true,
        "tsPlugins": ["@nestjs/swagger/plugin"]
      },
      "configurations": {
        "development": {
          "outputHashing": "none"
        },
        "production": {}
      }
    },
    "serve": {
      "continuous": true,
      "executor": "@nx/js:node",
      "defaultConfiguration": "development",
      "dependsOn": ["build"],
      "options": {
        "buildTarget": "apps-api:build",
        "runBuildTargetDependencies": false
      },
      "configurations": {
        "development": {
          "buildTarget": "apps-api:build:development"
        },
        "production": {
          "buildTarget": "apps-api:build:production"
        }
      }
    },
    "lint": {
      "executor": "@nx/eslint:lint"
    },
    "test": {
      "options": {
        "passWithNoTests": true
      }
    }
  }
}
"
`;

exports[`api generator should run successfully: apps/api/src/app/app.module.ts 1`] = `
"import { SendRawEmailCommand, SES } from '@aws-sdk/client-ses';
import {
  CaliobaseModule,
  parseEnvVars,
  S3ObjectStorageProvider,
  TOKEN_TOKEN,
} from '@caliobase/caliobase';
import { DynamicModule, Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';
import { createTransport } from 'nodemailer';
import * as SESTransport from 'nodemailer/lib/ses-transport';
import { AppController } from './app.controller';
import { AppService } from './app.service';
import { OrganizationProfile } from './entities/organization-profile.entity';
import { UserProfile } from './entities/user-profile.entity';

const ses = new SES({});

const envVars = parseEnvVars(({ required, optional }) => ({
  pgConnectionString:
    optional(
      'PG_CONNECTION_JSON',
      (v) => {
        const { host, port, username, password } = JSON.parse(v);
        return \`postgresql://\${username}:\${password}@\${host}:\${port}/postgres\`;
      },
      null
    ) ?? required('PG_CONNECTION_STRING', String),
  cmsHostname: required('CMS_HOSTNAME', String),
  emailFromAddress: required('EMAIL_FROM_ADDRESS', String),
  s3: {
    bucket: optional('S3_BUCKET', String, ''),
    keyPrefix: optional('S3_KEY_PREFIX', String, ''),
    endpoint: optional('S3_ENDPOINT', String, undefined),
  },
  cdn: {
    urlPrefix: optional('STATIC_FILE_BASEURL', String, ''),
  },
}));

@Module({
  imports: [],
  controllers: [AppController],
  providers: [AppService],
})
export class AppModule {
  static async forRootAsync(): Promise<DynamicModule> {
    return {
      module: AppModule,
      providers: [],
      imports: [
        TypeOrmModule.forRoot({
          type: 'postgres',
          url: envVars.pgConnectionString,
          autoLoadEntities: true,
        }),

        CaliobaseModule.forRootAsync({
          allowCreateOwnOrganizations: true,
          urls: {
            forgotPassword: \`https://\${envVars.cmsHostname}/forgotPassword?token=\${TOKEN_TOKEN}\`,
          },
          controllerEntities: [],
          otherEntities: [],
          profileEntities: {
            OrganizationProfile,
            UserProfile,
            socialProfileToUserProfile: null,
          },
          objectStorageProvider: new S3ObjectStorageProvider({
            ...envVars.s3,
            cdnUrlPrefix: envVars.cdn.urlPrefix,
          }),
          emailTransport: createTransport(
            <SESTransport.Options>{
              SES: { aws: { SendRawEmailCommand }, ses },
            },
            { from: envVars.emailFromAddress }
          ),
        }),
      ],
    };
  }
}
"
`;

exports[`api generator should run successfully: apps/api/src/app/entities/organization-profile.entity.ts 1`] = `
"import {
  AbstractOrganizationProfile,
  CaliobaseEntity,
} from '@caliobase/caliobase';
import { Column } from 'typeorm';

@CaliobaseEntity({
  controller: { name: 'organization_profile' },
})
export class OrganizationProfile extends AbstractOrganizationProfile {
  @Column()
  name!: string;
}
"
`;

exports[`api generator should run successfully: apps/api/src/app/entities/user-profile.entity.ts 1`] = `
"import { AbstractUserProfile, CaliobaseEntity } from '@caliobase/caliobase';
import { Column } from 'typeorm';

@CaliobaseEntity({
  controller: { name: 'user_profile' },
})
export class UserProfile extends AbstractUserProfile {
  @Column()
  firstName!: string;

  @Column()
  lastName!: string;
}
"
`;

exports[`api generator should run successfully: apps/api/src/main.ts 1`] = `
"import { CaliobaseModule } from '@caliobase/caliobase';
import { Logger } from '@nestjs/common';
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app/app.module';

async function bootstrap() {
  const app = await NestFactory.create(AppModule.forRootAsync(), {
    cors: true,
  });

  const globalPrefix = 'api';
  app.setGlobalPrefix(globalPrefix);

  await CaliobaseModule.bootstrap(app, {
    migration: {
      migrationsDir: './apps/apps-api/migrations',
    },
  });

  const port = process.env.PORT || 3324;
  await app.listen(port);
  Logger.log(
    \`ðŸš€ Application is running on: http://localhost:\${port}/\${globalPrefix}\`
  );
}

bootstrap().catch((err) => {
  console.error(err);
  process.exit(1);
});
"
`;

exports[`api generator should run successfully: package.json 1`] = `
"{
  "name": "@proj/source",
  "dependencies": {
    "@aws-sdk/client-ses": "^3.171.0",
    "@caliobase/caliobase": "*",
    "@nestjs/common": "^11.0.0",
    "@nestjs/core": "^11.0.0",
    "@nestjs/platform-express": "^11.0.0",
    "@nestjs/swagger": "7.3.0",
    "axios": "^1.6.0",
    "nodemailer": "^6.7.5",
    "reflect-metadata": "^0.1.13",
    "rxjs": "^7.8.0",
    "tslib": "^2.3.0"
  },
  "devDependencies": {
    "@nestjs/schematics": "11.0.5",
    "@nestjs/testing": "^11.0.0",
    "@nx/eslint": "21.2.3",
    "@nx/eslint-plugin": "21.2.3",
    "@nx/jest": "21.2.3",
    "@nx/js": "21.2.3",
    "@nx/nest": "21.2.3",
    "@nx/node": "21.2.3",
    "@nx/web": "21.2.3",
    "@nx/webpack": "21.2.3",
    "@swc-node/register": "~1.9.1",
    "@swc/core": "~1.5.7",
    "@swc/helpers": "~0.5.11",
    "@types/jest": "^29.5.12",
    "@types/node": "~18.16.9",
    "@types/nodemailer": "^6.4.4",
    "@typescript-eslint/eslint-plugin": "^7.16.0",
    "@typescript-eslint/parser": "^7.16.0",
    "eslint": "~8.57.0",
    "eslint-config-prettier": "^10.0.0",
    "jest": "^29.7.0",
    "jest-environment-node": "^29.7.0",
    "prettier": "^2.6.2",
    "ts-jest": "^29.1.0",
    "ts-node": "10.9.1",
    "typescript": "~5.8.2"
  }
}
"
`;
